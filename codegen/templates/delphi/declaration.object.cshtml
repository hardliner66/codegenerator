@if(@Helper.IsSet(Model.Attributes, "interfaced")) {
    @:T@(Model.Name) = class(TInterfacedObject, IIsSerializable, I@(Model.Name))
} else {
    @:T@(Model.Name) = class(TInterfacedObject, IIsSerializable)
}
    strict private

    strict private
        type KeyConstants = class abstract
        strict private
			constructor Create(); reintroduce; virtual; abstract; // Prevent anyone from accessing the constructor
		public
			@foreach(var p in Model.Properties) {
                @Include("declaration.object.key_constants", p)
            }

		end;

    strict private

    public
    @foreach(var p in Model.Properties) {
        if(Helper.IsSet(Model.Attributes, "list")) {
            @Include("declaration.property.list", p)
        } else {
            @Include("declaration.property", p)
        }
    }


        function Serialize(out value: string): Cardinal; overload;
        function Deserialize(const value: string): Cardinal; overload;

        function Serialize(out value: TJSONValue): Cardinal; overload;
        function Deserialize(const value: TJSONValue): Cardinal; overload;

end;