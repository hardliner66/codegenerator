{@Model.Name}@{string prefix = Helper.IsSet(Model.Attributes, "interfaced") ? "_" : "";}

@if(@Extensions.HasObjectTypeOrList(Model)) {
<text>constructor T@(Model.Name).Create();
begin
	@foreach(var p in Model.Properties) {
		if (Extensions.IsObjectType(p)) {
			if (p.List) {
	@:@(prefix)@p.Name := TList<@p.Type>.Create();
			} else {
	@:@(prefix)@p.Name := @(p.Type).Create();
			}
		}
	}
end;

destructor T@(Model.Name).Destroy();
begin
	@foreach(var p in Model.Properties) {
		if (Extensions.IsObjectType(p) && Extensions.NeedsDestructor(p)) {
	@:TCommonMemory.SafeFreeAndNil(@(prefix)@(p.Name));
		}
	}
end;</text>
}

@if(@Helper.IsSet(Model.Attributes, "interfaced")) {
	@Include("implementation.properties", Model)
}

@Include("implementation.serialization")

