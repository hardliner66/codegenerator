    T@(Model.Name) = class(TInterfacedObject, IIsSerializable, I@(Model.Name))
    strict private

    strict private
        type KeyConstants = class abstract
        strict private
			constructor Create(); reintroduce; virtual; abstract; // Prevent anyone from accessing the constructor
		public
			@foreach(var p in Model.Properties) {
                @Include("declaration.object.key_constants", p)
            }

		end;


    strict private

    public
    @foreach(var p in Model.Properties) {

        if(p.List) {
        @:function Get@(p.Name): TList<@p.Type>;
        @:procedure Set@(p.Name)(const value: TList<@p.Type>);
        @:property @p.Name: TList<@p.Type> read Get@(p.Name) write Set@(p.Name);
        } else {
        @:function Get@(p.Name): @p.Type;
        @:procedure Set@(p.Name)(const value: @p.Type);
        @:property @p.Name: @p.Type read Get@(p.Name) write Set@(p.Name);
        }
<text>
</text>
    }

    @if(@Extensions.HasObjectType(Model)) {
        @:constructor Create();
        @:destructor Destroy(); override;
    }

        function Serialize(out value: string): Cardinal; overload;
        function Deserialize(const value: string): Cardinal; overload;

        function Serialize(out value: TJSONValue): Cardinal; overload;
        function Deserialize(const value: TJSONValue): Cardinal; overload;

end;